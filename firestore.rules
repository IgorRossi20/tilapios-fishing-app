rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Usuários podem ler e escrever apenas seus próprios dados
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Posts são públicos para leitura, mas apenas o autor pode editar
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }
    
    // Campeonatos são públicos para leitura, apenas criador pode editar
    match /tournaments/{tournamentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }
    
    // Campeonatos de pesca (nova coleção)
    match /fishing_tournaments/{tournamentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;

      // Permitir: 
      // - criador editar/deletar
      // - participantes atualizarem apenas 'participants' e 'participantCount'
      allow update: if request.auth != null && (
        // Criador pode editar qualquer campo
        request.auth.uid == resource.data.createdBy ||
        // Participação: permitir mudanças somente nesses dois campos
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['participants', 'participantCount'])
      );

      allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy;
    }
    
    // Capturas são públicas para leitura, apenas o autor pode editar
    match /fishing_catches/{catchId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Capturas antigas (compatibilidade)
    match /catches/{catchId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Rankings são apenas para leitura (atualizados por Cloud Functions)
    match /rankings/{rankingId} {
      allow read: if request.auth != null;
      allow write: if false; // Apenas Cloud Functions podem escrever
    }
    
    // Comentários são públicos para leitura, apenas autor pode editar
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }
    
    // Likes são públicos para leitura, apenas autor pode editar
    match /likes/{likeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Convites de campeonatos
    match /tournament_invites/{inviteId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.inviterId || 
         request.auth.uid == resource.data.inviteeId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.inviterId;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.inviterId || 
         request.auth.uid == resource.data.inviteeId);
      allow delete: if request.auth != null && request.auth.uid == resource.data.inviterId;
    }
    
    // Notificações do usuário (sociais)
    match /notifications/{notificationId} {
      // Qualquer usuário autenticado pode criar uma notificação quando executa uma ação (ator)
      allow create: if request.auth != null && request.auth.uid == request.resource.data.actorId;
      // Somente o destinatário pode ler suas notificações
      allow read: if request.auth != null && request.auth.uid == resource.data.recipientId;
      // Somente o destinatário pode marcar como lida; restringe mudanças ao campo 'read'
      allow update: if request.auth != null
                    && request.auth.uid == resource.data.recipientId
                    && request.resource.data.diff(resource.data).changedKeys().hasOnly(['read']);
      // Não permitir delete direto pelo cliente
      allow delete: if false;
    }
  }
}